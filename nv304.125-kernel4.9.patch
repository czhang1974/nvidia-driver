diff -Naur a/kernel/nv.c b/kernel/nv.c
--- a/kernel/nv.c	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv.c	2018-07-01 11:08:14.000000000 -0400
@@ -2026,7 +2026,7 @@
     unsigned long i_arg
 )
 {
-    return nv_kern_ioctl(file->f_dentry->d_inode, file, cmd, i_arg);
+    return nv_kern_ioctl(file->f_inode, file, cmd, i_arg);
 }
 
 long nv_kern_compat_ioctl(
@@ -2035,7 +2035,7 @@
     unsigned long i_arg
 )
 {
-    return nv_kern_ioctl(file->f_dentry->d_inode, file, cmd, i_arg);
+    return nv_kern_ioctl(file->f_inode, file, cmd, i_arg);
 }
 
 /*
diff -Naur a/kernel/nv-drm.c b/kernel/nv-drm.c
--- a/kernel/nv-drm.c	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv-drm.c	2018-07-01 11:08:14.000000000 -0400
@@ -71,7 +71,7 @@
 };
 
 static struct drm_driver nv_drm_driver = {
-    .driver_features = 0,
+    .driver_features = DRIVER_LEGACY,
     .load = nv_drm_load,
     .unload = nv_drm_unload,
     .fops = &nv_drm_fops,
diff -Naur a/kernel/nv-linux.h b/kernel/nv-linux.h
--- a/kernel/nv-linux.h	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv-linux.h	2018-07-01 11:08:14.000000000 -0400
@@ -254,6 +254,15 @@
 #include <linux/seq_file.h>
 #endif
 
+/*
+ * In version 304.125, os-agp.c and os-mtrr.c still use deprecated
+ * kernel APIs for mtrr which are no longer exported since 4.3, causing
+ * the module to error out when loaded.
+ */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,3,0)
+#undef CONFIG_MTRR
+#endif
+
 #if !defined(NV_VMWARE) && defined(CONFIG_MTRR)
 #include <asm/mtrr.h>
 #endif
@@ -1796,4 +1805,47 @@
 
 #include "nv-proto.h"
 
+#include <linux/mm.h>
+
+        static inline long NV_GET_USER_PAGES(unsigned long start,
+                                             unsigned long nr_pages,
+                                             int write,
+                                             int force,
+                                             struct page **pages,
+                                             struct vm_area_struct **vmas)
+        {
+            unsigned int flags = 0;
+
+            if (write)
+                flags |= FOLL_WRITE;
+            if (force)
+                flags |= FOLL_FORCE;
+
+            return get_user_pages(start, nr_pages, flags, pages, vmas);
+        }
+
+        static inline long NV_GET_USER_PAGES_REMOTE(struct task_struct *tsk,
+                                                    struct mm_struct *mm,
+                                                    unsigned long start,
+                                                    unsigned long nr_pages,
+                                                    int write,
+                                                    int force,
+                                                    struct page **pages,
+                                                    struct vm_area_struct **vmas)
+        {
+            unsigned int flags = 0;
+
+            if (write)
+                flags |= FOLL_WRITE;
+            if (force)
+                flags |= FOLL_FORCE;
+
+
+               return get_user_pages_remote(tsk, mm, start, nr_pages, flags,
+                                            pages, vmas);
+
+
+        }
+
+
 #endif  /* _NV_LINUX_H_ */
diff -Naur a/kernel/nv-mlock.c b/kernel/nv-mlock.c
--- a/kernel/nv-mlock.c	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv-mlock.c	2018-07-01 11:08:14.000000000 -0400
@@ -49,7 +49,7 @@
     }
 
     down_read(&mm->mmap_sem);
-    ret = get_user_pages(current, mm, (unsigned long)address,
+    ret = NV_GET_USER_PAGES((unsigned long)address,
             page_count, write, force, user_pages, NULL);
     up_read(&mm->mmap_sem);
     pinned = ret;
@@ -62,7 +62,7 @@
     else if (pinned < page_count)
     {
         for (i = 0; i < pinned; i++)
-            page_cache_release(user_pages[i]);
+            put_page(user_pages[i]);
         os_free_mem(user_pages);
         return RM_ERR_INVALID_ADDRESS;
     }
@@ -80,7 +80,7 @@
             {
                 pci_unmap_page(dev, pte_array[j],
                         PAGE_SIZE, PCI_DMA_BIDIRECTIONAL);
-                page_cache_release(user_pages[j]);
+                put_page(user_pages[j]);
             }
             os_free_mem(user_pages);
             return RM_ERR_OPERATING_SYSTEM;
@@ -114,7 +114,7 @@
                 PAGE_SIZE, PCI_DMA_BIDIRECTIONAL);
         if (write)
             set_page_dirty_lock(user_pages[i]);
-        page_cache_release(user_pages[i]);
+        put_page(user_pages[i]);
     }
 
     os_free_mem(user_pages);
diff -Naur a/kernel/nv-pat.c b/kernel/nv-pat.c
--- a/kernel/nv-pat.c	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv-pat.c	2018-07-01 11:08:14.000000000 -0400
@@ -35,8 +35,8 @@
     unsigned long cr0 = read_cr0();
     write_cr0(((cr0 & (0xdfffffff)) | 0x40000000));
     wbinvd();
-    *cr4 = read_cr4();
-    if (*cr4 & 0x80) write_cr4(*cr4 & ~0x80);
+    *cr4 = __read_cr4();
+    if (*cr4 & 0x80) __write_cr4(*cr4 & ~0x80);
     __flush_tlb();
 }
 
@@ -46,7 +46,7 @@
     wbinvd();
     __flush_tlb();
     write_cr0((cr0 & 0x9fffffff));
-    if (cr4 & 0x80) write_cr4(cr4);
+    if (cr4 & 0x80) __write_cr4(cr4);
 }
 
 static int nv_determine_pat_mode(void)
diff -Naur a/kernel/nv-procfs.c b/kernel/nv-procfs.c
--- a/kernel/nv-procfs.c	2014-12-01 22:58:34.000000000 -0500
+++ b/kernel/nv-procfs.c	2018-07-01 11:08:14.000000000 -0400
@@ -607,7 +607,8 @@
     registry_keys = ((nvl != NULL) ?
             nvl->registry_keys : nv_registry_keys);
 
-    return seq_printf(s, "Binary: \"%s\"\n", registry_keys);
+    seq_printf(s, "Binary: \"%s\"\n", registry_keys);
+    return 0;
 }
 
 static ssize_t
@@ -674,7 +675,8 @@
     void *v
 )
 {
-    return seq_puts(s, s->private);
+    seq_puts(s, s->private);
+    return 0;
 }
 
 NV_DEFINE_PROCFS_SINGLE_FILE(text_file);
